/*
栈区：
	由编译器自动分配释放，存放函数的参数值，局部变量等
	【注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放】
*/

#include <iostream>
using namespace std;

// 栈区数据注意事项： 不要返回局部变量的地址，
// 栈区数据由编译器管理、开辟、释放

int * func(int b) // 形参数据也会放在栈区 
{
	b = 100;
	int a = 10; // 局部变量
	return &a;  // 不要返回局部变量的地址，因为在栈区
				// 栈区的数据在函数执行完后自动释放
}

int main86() 
{
	int * p = func(1); //利用指针接收func函数的返回值

	cout << * p << endl; // 现在能打印出来10
	cout << * p << endl; // 就打印不出来了，乱码
	/*
	原因：
		当这个函数执行完，栈上的数据就清空了。
		第一次可以打印正确的数据，是因为编译器做了保留，只保留这一次。
		第二次这个数据就不再保留了。

	因此：
		不要返回局部变量的地址
	*/



	system("pause");
	return 0;
}

/*
总结：
	1、形参会放在栈区
	2、局部变量会放在栈区，不要返回局部变量的地址，因为会被栈区释放
*/
